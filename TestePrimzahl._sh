#!/usr/bin/env bash

function _prim() {
# prüft, ob der übergebene Parameter eine natürliche Zahl ist
# und testet dann, ob es eine Primzahl ist.
# Wenn der Parameter *keine* natürliche Zahl ist, kommt der Returncode 127
# Wenn der Parameter *keine* Primzahl ist, kommt der Returncode 1
# Wenn der Parameter eine Primzahl ist, kommt der Returncode 0

  [[ "$1"  =~ ^[0-9]+$ ]] || return 127
  # Wenn Parameter keine natürliche Zahl, dann Fehlercode 127

  local l_zahl=$1
  # lokal: zu prüfende Zahl wird als
  # einziger Parameter an Funktion übergeben

  local l_teiler=""
  # lokal: Teiler --> fungiert auch als Zähler

  local l_max=$(echo "sqrt($l_zahl)" | bc)
  # lokal: Teilbarkeit muss nur bis zur Wurzel der
  # Zahl geprüft werden - ich will auch kein
  # komplette Sieb programmieren

  [[ $l_zahl -lt 2 ]] && return 1
  # Zahlen <2 sind nicht prim
  
  for l_teiler in $(seq 2 $l_max)
  # 2 läuft nicht durch die Schleife
    do
    [[ $(( l_zahl % l_teiler )) -eq 0 ]] && return 1
    # prüfe ob Zahl teilbar ohne Rest, wenn Rest = 0, dann nicht prim
    done
  return 0
  # wenn bis hier durchgelaufen, dann ist Zahl prim
  }
  
